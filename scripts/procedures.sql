create or replace PROCEDURE AUTOMATE_FS_CLEAR_POSTGRES AS 
BEGIN
    FOR x IN (SELECT * FROM X2_SA_FLIGHT_SCHEDULE)
    LOOP
        UPDATE_POSTGRES_FLIGHT_SCHEDULE(x.ROUTE_ID);
    END LOOP;
END;

create or replace PROCEDURE AUTOMATE_ORC_FS_CLEAN AS 
BEGIN
  FOR x IN (SELECT ID FROM TEMP_ORC_FS WHERE SUBSTR(DEPARTURE_TIME,1,2) = '00' OR SUBSTR(ARRIVAL_TIME,1,2) = '00')
  LOOP
    DELETE_INVALID_DATES_FROM_ORC_FS(x.ID);
  END LOOP;
END;

create or replace PROCEDURE AUTOMATE_TO_UPDATE_ROTES AS 
BEGIN
    DELETE_CONFLICTS;
    FOR id IN 1 .. 33
    LOOP
        FOR id2 IN 1 .. 33  
        LOOP
            IF id = id2 THEN
                CONTINUE; 
            END IF;
            UPDATE_DISTANCE_PROCEDURE(id,id2);
            UPDATE_ROUTES_ID_PROCEDURE(id,id2);
            DELETE_DUPLICATED_ROUTES(id,id2);
        END LOOP;
    END LOOP;
END;

create or replace PROCEDURE AUTOMATE_TRANSFER_TICKET AS 
BEGIN
  FOR x IN (SELECT DISTINCT(FLIGHTID) FROM SA_ORC_TICKET_A)
  LOOP
    TRANSFER_TICKET_PRICE_TO_CLASS(x.FLIGHTID);
  END LOOP;
END;

create or replace PROCEDURE DELETE_CONFLICTS AS 
BEGIN
    DELETE FROM SA_2_ROUTES WHERE DEPARTURE_AIRPORT_ID = ARRIVAL_AIRPORT_ID ;
    COMMIT;
END ;

create or replace PROCEDURE DELETE_DUPLICATED_ROUTES (
    start_id in integer,
    end_id in integer
)
AS 
BEGIN
    DELETE FROM SA_2_ROUTES WHERE ID > (
        SELECT MAX(NEW_ID) FROM ( 
            SELECT NEW_ID FROM SA_2_ROUTES 
            WHERE
                DEPARTURE_AIRPORT_ID = start_id AND 
                ARRIVAL_AIRPORT_ID = end_id
            )) AND DEPARTURE_AIRPORT_ID = start_id AND 
                ARRIVAL_AIRPORT_ID = end_id;
END;

create or replace PROCEDURE DELETE_INVALID_DATES_FROM_ORC_FS (
    index_ INTEGER
)AS 
BEGIN
  DELETE FROM TEMP_ORC_FS 
  WHERE ID = index_;
END DELETE_INVALID_DATES_FROM_ORC_FS;

create or replace PROCEDURE DELETE_INVALID_XFS AS 
BEGIN
  FOR x IN (SELECT ID FROM TO_DELETE_XSA_FS)
  LOOP
    DELETE FROM X_SA_FLIGHT_SCHEDULE WHERE ID = x.ID;
  END LOOP;
END ;

create or replace PROCEDURE TRANSFER_TICKET_PRICE_TO_CLASS 
    (index_ INTEGER) 
AS 
BEGIN
    UPDATE SA_ORC_TICKET_A
        SET TRAVEL_CLASS = 'BUSINESS'
    WHERE PRICE > (SELECT BORDER FROM TEMP_TICKETS_GROUP WHERE FLIGHT_ID = index_ ) AND FLIGHTID = index_;
END;

create or replace PROCEDURE update_distance_procedure 
    (dept in integer,
    arr in integer) 
AS
    BEGIN
        UPDATE SA_2_ROUTES 
        SET NEW_DISTANCE = (
            SELECT AVG(DISTANCE) 
            FROM SA_2_ROUTES
            WHERE (DEPARTURE_AIRPORT_ID = DEPT AND ARRIVAL_AIRPORT_ID = ARR) 
            OR (DEPARTURE_AIRPORT_ID = ARR AND ARRIVAL_AIRPORT_ID = DEPT)
        ) WHERE (DEPARTURE_AIRPORT_ID = DEPT AND ARRIVAL_AIRPORT_ID = ARR) 
            OR (DEPARTURE_AIRPORT_ID = ARR AND ARRIVAL_AIRPORT_ID = DEPT);
    COMMIT;
    END;
    
create or replace PROCEDURE UPDATE_POSTGRES_FLIGHT_SCHEDULE (
    index_ integer)
AS 
BEGIN
    UPDATE X2_SA_FLIGHT_SCHEDULE SFS
        SET ROUTE_ID = (SELECT NEW_ID FROM SA_2_ROUTES WHERE ID = index_)
    WHERE SFS.ROUTE_ID = index_;
END UPDATE_POSTGRES_FLIGHT_SCHEDULE;

create or replace PROCEDURE UPDATE_ROUTES AS 
BEGIN
    FOR did IN (SELECT DETAILS_ID FROM TEMP)
    LOOP
        UPDATE SA_1_ORC_FLIGHT_SCHEDULE SOFS
            SET ROUTE_ID = (SELECT ID FROM TEMP WHERE DETAILS_ID = did.DETAILS_ID )
        WHERE SOFS.ID = did.DETAILS_ID;
    END LOOP;
END UPDATE_ROUTES;

create or replace PROCEDURE UPDATE_ROUTES_ID_PROCEDURE ( 
        start_id in integer,
        end_id in integer )
AS 
BEGIN
    UPDATE SA_2_ROUTES
    SET NEW_ID = (
        SELECT min(ID) AS MINID FROM SA_2_ROUTES WHERE (DEPARTURE_AIRPORT_ID = start_id AND ARRIVAL_AIRPORT_ID = end_id)
    ) WHERE (DEPARTURE_AIRPORT_ID = start_id AND ARRIVAL_AIRPORT_ID = end_id);
    
    
    UPDATE SA_2_ROUTES
    SET NEW_ID = (
        SELECT min(ID) AS MINID FROM SA_2_ROUTES WHERE (DEPARTURE_AIRPORT_ID = end_id AND ARRIVAL_AIRPORT_ID = start_id)
    ) WHERE (DEPARTURE_AIRPORT_ID = end_id AND ARRIVAL_AIRPORT_ID = start_id);
    
    COMMIT;
END UPDATE_ROUTES_ID_PROCEDURE;